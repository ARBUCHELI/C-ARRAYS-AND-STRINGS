# PROJECT
---------

* Anagram Finder
----------------
In this project, we will write a program to determine whether two strings are anagrams or not.

String y is an anagram of string x if y is a rearrangement of string x. This implies that y and x have the same letters with the same amount of each letter. Example: “code” and “deco” are 
anagrams!

The constraints of this project are: Each string will contain only characters that are from the first four letters of the English alphabet (‘a’, ‘b’, ‘c’, ‘d’) and spaces. All letters are 
in lowercase.

We will do this by creating two arrays of length four: one for each string that represents the count of each character. These arrays will serve as counters. In each array, the number at 
position zero corresponds to the count of the letter ‘a’, the number at position one will correspond to the count of the letter ’b’ and this pattern will continue for the remaining 
letters. We do not count the number of spaces. For example, “a bc d” would be an anagram of “ab cd”.

We will then loop through both strings and update their respective counters.

We will then compare the two counters to see if the two strings are anagrams and if they are, we will print “Anagram!”. If they are not, we will print “Not Anagram!”

Let’s get started!!

* Tasks
-------
10/10 complete
Mark the tasks as complete by checking them off

* Setting everything up.
------------------------
1.
Copy and paste the following starting code into your workspace:

#include<stdio.h>
#include<string.h>
int main() {

}


Hint
You will need #include<stdio.h> for the input/output and #include<string.h> to work with strings.

Inside int main() is where you will place the code for the project!

2.
Create two integer arrays called counter1 and counter2. Initialize both arrays with four zeros each.


Hint
An array of integers can be created like this:

int counter1[] = {0, 0, 0, 0};

3.
We will check if the following two strings are anagrams:

	. String 1: “dbb cccccaacb cdbababdcdcdab dcdad”

	. String 2: “bbbcc bdddccccad cdbbaaacaccdabdd”

Right under your counters, create two char arrays called s1 and s2 containing String 1 and String 2 respectively.


Hint
Remember there are two ways to create a string in C: One way is with an initialized array of characters and the other is using string literals. Since the strings are long, we recommend 
you use string literals. An example of this is:

char s1[] = "This is a string literal";

* Counting the characters in String 1.
--------------------------------------
4.
First, create a for loop to loop through the string. Use strlen() to find the length of the string.


Hint
A for loop to loop through a string is created like so:

for(int i = 0; i < strlen(s1); i++){

}

5.
We will now write the logic to determine the number of each character in String 1.

We will update counter1 in the following way:

	. If we encounter an ‘a’ we will increment counter1[0] by one.

	. If we encounter a ‘b’ we will increment counter1[1] by one.

	. If we encounter a ‘c’ we will increment counter1[2] by one.

	. If we encounter a ‘d’ we will increment counter1[3] by one.

	. If we encounter a space, we ignore it.

Implement this logic in the loop body.


Hint
Use if blocks to do this. Example:

for(int i = 0; i < strlen(s1); i++){
  if(s1[i] == 'a'){
    counter1[0]++;
  }
}

Repeat this procedure for the remainder of the letters.

* Counting the characters in String 2.
--------------------------------------
6.
Loop through String 2 and update its counter (counter2) accordingly.


Hint
This is the same thing you did for String 1 in tasks 4 & 5!

You can simply copy and paste the loop and its contents created for String 1. In the second copy, replace every s1 with s2 and every counter1 with counter2.

* Comparing the counts of both strings.
---------------------------------------
7.
We need a flag that we can use to determine if there is a mismatch in the two counters.

First, create an integer variable called flag and set it to 0.

The flag variable maintains one of these states:

	. The flag will be set to zero if there is no mismatch in the counters.

	. The flag will be set to one if there is a mismatch in the counters.

Hint
The flag variable is of type int.

8.
Create an empty for loop that you will use to loop through both counters. We will place logic in it in the next task.


Hint
Both counters are of the same size (four), so you will need one for loop that loops to four.

9.
In the loop, change the flag variable’s value to 1 if a mismatch is encountered.


Hint
Use an if statement to check if the i’th element in counter1 matches the i’th element in counter2. If an element in counter1 does not match its counterpart in counter2, set flag to 1.

* Well, are they anagrams?
--------------------------
10.
If the two strings are anagrams, print “Anagram!”. If they are not, print “Not Anagram!”


Hint
This can be done with an if-else block that inspects whether the flag variable is 0 or not.

anagrams.c
----------
#include<stdio.h>
#include<string.h>
int main()
{
  int counter1[] = {0, 0, 0, 0};
  int counter2[] = {0, 0, 0, 0};

  char s1[] = "dbb cccccaacb cdbababdcdcdab dcdad";
  char s2[] = "bbbcc bdddccccad cdbbaaacaccdabdd";

  int flag = 0;

  for (int i = 0; i < strlen(s1); i++)
  {
    if(s1[i] == 'a')
    {
      counter1[0] += 1;
    }
    else if(s1[i] == 'b')
    {
      counter1[1] += 1;
    }
    else if(s1[i] == 'c')
    {
      counter1[2] += 1;
    }
    else if(s1[i] == 'd')
    {
      counter1[3] += 1;
    }
  }

  /*for (int i = 0; i < sizeof(counter1)/sizeof(int); i++)
  {
    printf("%i\n", counter1[i]);
  }
  printf("\n");
  printf("\n");*/

  for (int i = 0; i < strlen(s2); i++)
  {
    if(s2[i] == 'a')
    {
      counter2[0] += 1;
    }
    else if(s2[i] == 'b')
    {
      counter2[1] += 1;
    }
    else if(s2[i] == 'c')
    {
      counter2[2] += 1;
    }
    else if(s2[i] == 'd')
    {
      counter2[3] += 1;
    }
    else if(s2[i] == ' ')
    {
      counter2[0] = counter2[0];
      counter2[1] = counter2[1];
      counter2[2] = counter2[2];
      counter2[3] = counter2[3];
    }
  }

  /*for (int i = 0; i < sizeof(counter2)/sizeof(int); i++)
  {
    printf("%i\n", counter2[i]);
  }*/
  for (int i = 0; i < 4; i++)
  {
    if (counter1[i] != counter2[i])
    {
      flag = 1;
    }
  }
  if (flag == 0)
  {
    printf("Anagram!");
  }
  else
  {
    printf("Not Anagram!");
  }
}