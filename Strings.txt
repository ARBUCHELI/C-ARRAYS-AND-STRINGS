# STRINGS
---------

* Introduction to Strings
-------------------------
1 min
Your very first exercise in this course was the traditional task of printing the line “Hello World” to the screen. In this lesson, we will dive deeper into the data type of “Hello World” 
and explore its properties and functions. In C, the line “Hello World” is known as a string as it is simply a string of characters. Strings are very important in programming and software 
engineering as they allow the program to display output to the user and can even be used to debug errors. In the C programming language, a string is represented by an array of chars and 
is consequently subject to all the properties and methods associated with arrays. The most common function used with strings is the printf() function as you have seen before.

* Instructions
--------------
Move on to the next exercise when you’re ready to start learning about strings!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating and Initializing Strings
-----------------------------------
10 min
Creating a string can be done in one of two ways. The first way is to simply create an initialized array of characters populated by the characters of the string. Here’s an example of the 
string “Hello World” created using an initialized array:

char str[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\0'};

The character array is populated by the characters of “Hello World.” There are two important things to note here:

	. A blank space is a character, so it is included by putting a space in single quotes.

	. The very last character in the array is \0 known as the null terminating character. It signifies the end of the string and must be included when creating a string as an 
	initialized array.

The string “Hello World” has 11 characters in it (space is a character too!) but the size of str[] is 12: 11 characters for “Hello World” plus one for the null character.

The second way to create a string variable in C is to use what is called a string literal. This is the creation of a string by initializing the char array with the full string in double 
quotes like so:

char str[] = "Hello World";

This is still an array of characters and is to be treated as such. The only benefit to creating a string in this way is that it’s easier to type and the null terminating character (‘\0’) 
is added implicitly. The size of this array is still 12 for the same reasons mentioned before.

Using the printf() function to print the string is done by providing the name of the string (array), regardless of how it was created, and "%s" to signify that printf() is working with a 
string. Here is an example:

char str[] = "Hello World";
printf("%s", str); // This will not print a new line
printf("%s\n", str); // This will print a new line

Note: Characters in C are case-sensitive; i.e., the characters ‘A’ and ‘a’ are treated as two different kinds of characters.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create the string “Computer” using an initialized array of chars. The variable should be called comp.


Hint
Recall the string “Hello World” was created like this:

char str[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\0'};

Don’t forget the null terminating character at the end!

Checkpoint 2 Passed
2.
Using string literals, create a string called compCode containing the string “Computer Code”.


Hint
Recall that a string can be declared using string literals like so:

char str[] = "Hello World";

Checkpoint 3 Passed
3.
Print the string stored in comp followed by the string stored in compCode on separate lines.


Hint
Printing a string is done like so:

char str[] = "Hello World";

printf("%s\n", str);

exercise2.c
-----------
#include<stdio.h>

int main() {
  // Checkpoint 1 code goes here
  char comp[] = {'C', 'o', 'm', 'p', 'u', 't', 'e', 'r', '\0'};
  // Checkpoint 2 code goes here
  char compCode[] = "Computer Code";
  // Checkpoint 3 code goes here 
  printf("%s\n", comp);
  printf("%s\n", compCode);     
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Character Access and Modification
-----------------------------------
7 min
The characters of a string are accessed using the same methods as those for a regular array. It’s important to note that since strings are arrays of characters, they are subject to all of 
the same constraints as an array. This means a string cannot be extended to add new characters, and a character in a string cannot be deleted!

Recall from the lesson on arrays that an element in an array is accessed like so:

arr[idx] 

In the case of strings, the index, idx, represents the character at that index. And just like arrays, the nth character is at index n-1. Here is an example:

char str[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '\0'};
char str2[] = "Hello World";

printf("%c\n", str[6]); // "%c" required to instruct printf() that it is to expect a character.
printf("%c", str2[6]);

The code above creates the string “Hello World” in both ways. str[6] and str2[6] will access the character at index six, which is the seventh character in both strings, respectively. In 
this case, this character is 'W', which is the same for both strings since they are identical.

Modifying a character in a string is done in the same way as modifying an element in an array regardless of how the string was created:

arr[idx] = newValue

In the case of strings, newValue represents the new character to be placed. Remember, that it is not possible to add characters or delete them. Here is an example:

char str[] = "Hello Yorld";
printf("%s\n", str); // This will print Hello Yorld to the screen

str[6] = 'W'; // Replace 'Y' with 'W'
printf("%s\n", str); // This will print Hello World to the screen

* Instructions
--------------
Checkpoint 1 Passed
1.
Print the third character of the string p.


Hint
A string is an array of characters, so you can access its elements in the same way as you would access the elements of an array. Remember to use the correct index!

Checkpoint 2 Passed
2.
The string p incorrectly attempts to spell the word “processor”. Correct this mistake and print the string to the console.


Hint
You will need to modify the string at the proper locations. Modifying a character in the string is done like so:

arr[idx] = newValue

exercise3.c
-----------
#include <stdio.h>

int main() {
  char p[] = "procezzor";
  // Checkpoint 1 code goes here
  printf("%c\n", p[2]);
  // Checkpoint 2 code goes here
  p[5] = 's';
  p[6] = 's';
  printf("%s", p);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


































































