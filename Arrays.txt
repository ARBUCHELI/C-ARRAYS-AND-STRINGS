# ARRAYS
--------

* Introduction to Arrays
------------------------
1 min
An array is a grouping of variables of the same type into contiguous blocks of memory. This data structure is especially useful in applications when there are many variables of the same 
type that are related to each other. Consider the example of having to store the three coordinates of a point in space (coordinates x, y, and z). A valid way you can store these 
coordinates in variables is:

int main() {
  int xCoordinate = 1;
  int yCoordinate = 2;
  int zCoordinate = 3;
}

While this is okay, especially for a small number of coordinates, it will become harder to manage as the number of coordinates increases. A solution to this problem is to store the 
coordinates in a data structure called an array like so:

int main() {
  int coordinates[3] = {1, 2, 3};
}

This piece of code declares a variable of type array called coordinates. Since the three coordinates are related to each other and are likely to be used together frequently, the 
coordinates array neatly stores them into one variable. We will explore how to access and manipulate the elements of an array in future exercises. Under the hood, the coordinates variable 
creates three int variables in memory which are stored contiguously. As a visual representation, you may think of arrays as a group of lockers, not unlike those found in a gym, where each 
locker is responsible for storing one variable of type int (or any other variable type you have learned about so far).

* Instructions
--------------
Move on when you’re ready to learn more!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating and Initializing Arrays
----------------------------------
6 min
An array is a collection of data that can be of any type. For example, you can construct an array of ints, bools, chars, etc.

There are two types of arrays that can be created: an initialized array or an uninitialized array. As its name implies, an uninitialized array is created without specifying the initial 
values it contains. As an example, we will create an uninitialized array called age, containing four variables of type int, which represents the age of four siblings:

int age[4];

To indicate to the compiler that age is an array of ints and not a single int variable, we append [arraySize] (in this case, arraySize is four) to the end of the variable name.

The general template for creating an uninitialized array is:

dataType name[arraySize];

When you create an uninitialized array, you are required to specify its size so that the compiler may reserve the proper amount of memory blocks. Once it is created, the size of the array 
cannot be changed; this means that arrays are static. An uninitialized array can be populated later in a program.

In contrast, an initialized array is created by specifying the initial value of its elements. As an example, we will create an age array with four initial ages:

int age[] = {7, 27, 34, 63};

The general template for creating an initialized array is:

dataType name[] = {firstValue, secondValue, thirdValue, …};

Notice that in this case, you don’t need to specify the size of the array as it is implied from the number of elements supplied; however, declaring an initialized array with the size 
specified will also work. The previous example could have also been written like this:

int age[4] = {7, 27, 34, 63};

* Instructions
--------------
Checkpoint 1 Passed
1.
Create an uninitialized array of five doubles called q.


Hint
Remember, an uninitialized array is created like this:

dataType name[arraySize];

Checkpoint 2 Passed
2.
Create an initialized array of integers called evens consisting of the first five even numbers, starting with 2.


Hint
Remember, an initialized array is created like this:

dataType name[] = {firstValue, secondValue, thirdValue, …};

exercise2.c
-----------




#include<stdio.h>

int main() {
  
  // Checkpoint 1 code goes here.
  double q[5];
  // Checkpoint 2 code goes here.
  int evens[] = {2, 4, 6, 8 , 10};
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Array Access and Element Modification
---------------------------------------
9 min
Array elements can be accessed, modified, and used just like any other variable of the same data type. The following shows how to access an element in an array at index idx:

arr[idx]

The first element in an array has index 0 and the last element in an array has index arraySize - 1. The nth element is at index n-1, so, for example, the third element would be at 
index 2.

An element in an array is modified just like a regular variable:

arr[idx] = newValue

Remember to be consistent with the data types! For example, elements of an array of integers can only be modified to represent other integer values; anything else will cause errors. When 
working with arrays, it is important to be careful and not attempt to access an element at an index greater than arraySize - 1 as the memory located there could be storing other data. 
Accessing an array at an index greater than arraySize - 1 will return a random value. Modifying an element at an index greater than arraySize - 1 will corrupt the data stored at that 
location, causing the program to behave in an unpredictable manner. The same is true for array access at indices less than zero.

The following piece of code changes an element in an array and assigns it to a lone variable:

#include<stdio.h>

int main() {
    int arr[] = {3, 5, 7, 9}; // Array creation
    arr[2] = 6; // Modify the third element
    int x = arr[2]; // Assign the third element to the lone variable x
    printf("%i", x); // Print x
}

* Instructions
--------------
Checkpoint 1 Passed
1.
The accompanying code erroneously attempts to print the last value in the evens array. Fix this bug.


Hint
The last value in an array is at index arraySize - 1.

Checkpoint 2 Passed
2.
Print the third element of the evens array.


Hint
Remember that elements in an array are accessed like so:

arr[index]

Also, remember that the nth element is at index n-1.

Checkpoint 3 Passed
3.
The odds array given is intended to contain the first six odd numbers. Notice that some values are incorrect. Fix them by changing their value to the correct odd number. Do this by using 
array access.


Hint
An element in an array can be modified like so:

arr[idx] = newValue

exercise3.c
-----------
#include<stdio.h>

int main() {

  int evens[] = {2, 4, 6, 8, 10, 12};
  int odds[] = {1, 4, 5, 7, 10, 11}; // Do not modify this line.
  
  printf("%i\n", evens[5]); // Checkpoint 1. Fix this error.

  // Code for checkpoint 2 goes here.
  printf("%i\n", evens[2]);
  // Code for checkpoint 3 goes here.
  odds[1] = 3;
  odds[4] = 9;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Looping Through Arrays
------------------------
13 min
The main benefit of arrays is the ability to work with large amounts of data without assigning each piece of data its own variable name; therefore arrays usually contain many elements. To 
work with these elements, you will probably have to do something repeatedly. As you learned earlier in the course, a loop is used in order to execute repeated code. The technique of using 
a loop on an array is called “looping through the array.” Recall the two kinds of loops: a for loop and a while loop.

Let’s first take a look at how to loop through an array using a while loop. Consider the example of having an array consisting of 20 random integers and you wish to print its contents to 
the screen. Here’s how this is done with a while loop:

#include<stdio.h>

int main() {
  int arr[] = {6, 9, 18, 37, 4, 23, 27, 16, 1, 30, 22, 7, 10, 25, 3, 2, 35, 11, 19, 28}; // Array
  int i = 0; // Initialize index i to zero
  while(i < 20){ // while loop
    printf("%i\n", arr[i]); // Access element at index i in arr and print 
    i++; // Increment the index
  }
}

In this piece of code, we have the 20 integer array arr. An index variable is declared and initialized outside of the loop. The loop runs for indices less than the size of the array (in 
this case, it is 20). The element at index i is printed along with a new line. Finally, the index is incremented by one.

This same process can be done using a for loop like so:

#include<stdio.h>

int main() {
  int arr[] = {6, 9, 18, 37, 4, 23, 27, 16, 1, 30, 22, 7, 10, 25, 3, 2, 35, 11, 19, 28}; // Array
  for(int i = 0; i < 20; i++){ // for loop
    printf("%i\n", arr[i]); // Access element at index i in arr and print
  }
}

* Instructions 
--------------
Checkpoint 1 Passed
1.
Loop through array arr and print each element on a separate line. The array contains 20 elements.


Hint
Looping through an array using a while loop:

int i = 0;
while(i < arraySize){
  // arr[i] accesses element at index i in the array arr.
  i++;
}

Looping through an array using a for loop:

for(int i = 0; i < arraySize; i++){
  // arr[i] accesses element at index i in the array arr.
}

In this case, arraySize is 20.

Checkpoint 2 Passed
2.
Given the integer array arr2, fill up the array so that each element in the array is four plus the index of the element.

Example:

arr[0] = 4, arr[1] = 5, arr[2] = 6, etc.


Hint
Loop through the array using a while loop or a for loop. Use the index value to compute the element value.

Remember, assigning an element to an array is done like so:

arr[idx] = newValue

exercise4.c
-----------
#include<stdio.h>

int main() {
  int arr[] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 26, 28, 29};
  int arr2[100];
    
  // Code for Checkpoint 1 goes here
  int i = 0;
  while (i < 20)
  {
    printf("%i\n", arr[i]);
    i++;
  }
  // Code for Checkpoint 2 goes here
  for (int i = 0; i < 100; i++)
  {
    arr2[i] = i + 4;
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Length of Array Using sizeof()
--------------------------------
12 min
Up to now, when looping through an array, the size of the array has been hardcoded into the loop condition. This is bad practice as it makes the loop only applicable to arrays of a single 
size. To make a loop valid for arrays of any size, the sizeof() function is used. sizeof() is a special function that returns an integer that is the size of the array in bytes. The syntax 
for this function is as follows:

sizeof(arr);

Here is an example:

int main() {
  int arr[] = {3, 8, 4, 0, 9}; 
  int len = sizeof(arr); // Assign size of array to variable len
  printf("%i", len);
}

The array has five elements in it, however, this code will output the number 20 as opposed to five because sizeof() returns the total number of bytes occupied by the array regardless of 
the type of elements. Recall that a variable occupies several bytes in memory determined by its type. In this case, the array has five integers each of which occupies four bytes of 
memory; therefore the total size is 5 x 4 = 20 bytes. To get the actual number of elements in the array, we have to divide the total size of the array by the size of the data type it 
contains. Fortunately, the sizeof() function can also be applied to any data type to determine its size in memory. The syntax is the same as that for an array:

sizeof(dataType);

We can modify the variable len to represent the number of elements in the array arr like so:

// Assign size of array to variable len. Scale by the size of an int.
int len = sizeof(arr)/sizeof(int);

The code will now output the expected size of the array (five).

Using this technique, a loop can now be written to work with arrays of arbitrary length. Here is an example:

#include<stdio.h>

int main() {
  int arr[] = {3, 2, 10, 6, 18, 5, 8, 4, 0, 9}; 
  int len = sizeof(arr)/sizeof(int);
  for(int i = 0; i < len; i++){
    printf("%i\n", arr[i]);
  }
}

Notice how in the condition for the for loop, the variable len is used to represent the length of the array as opposed to hardcoding it in. We can further simplify the code above by 
eliminating the variable len and directly computing the size of the array in the for loop condition.

#include<stdio.h>

int main() {
  int arr[] = {3, 2, 10, 6, 18, 5, 8, 4, 0, 9};
  for(int i = 0; i < sizeof(arr)/sizeof(int); i++){
    printf("%i\n", arr[i]);
  }
}

* Instructions
--------------
Checkpoint 1 Passed
1.
Set the variable len to the length of the array arr.


Hint
Use the sizeof() function to find the total size of the array (this is not the number of elements in the array).

Use the sizeof() function again to find the size of a double data type.

Dividing the total size of the array by the size of a double type gives you the number of elements in the array.

Checkpoint 2 Passed
2.
Loop through the array and print the contents. Each element should be on a new line.


Hint
Consider the example given earlier to print the elements of an array:

int main() {
  int arr[] = {3, 2, 10, 6, 18, 5, 8, 4, 0, 9};
  for(int i = 0; i < sizeof(arr)/sizeof(int); i++){
    printf("%i\n" arr[i]);
  }
}

To print a double and a new line, the printf() function requires the string "%f\n" as the first parameter.

exercise5.c
-----------
#include<stdio.h>

int main() {
  double arr[] = {1.0, 8, 2.27, 16.2, 2, 3.14, 12.6, 1.62, 6.54, 9, 11};
  int len;
  
  // Checkpoint 1 code goes here.
  len = sizeof(arr) / sizeof(double);
  printf("%i\n", len);

  // Checkpoint 2 code goes here.
  for (int i = 0; i < len; i++)
  {
    printf("%f\n", arr[i]);
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Multidimensional Arrays
-------------------------
8 min
As we said before, arrays can contain any kind of data type, be it int, char, or anything else. Interestingly, arrays can also store other arrays! An array containing other arrays is 
known as a multidimensional array. These kinds of arrays are frequently used in mathematical applications that involve matrices and vectors. Similar to its single dimension counterpart, a 
multidimensional array can be initialized or uninitialized upon its creation. Let’s take a look at the uninitialized version first. The following is a two-dimensional array of integers 
called mat which represents a three-by-four matrix:

int mat[3][4];

The previous code indicates that the array mat contains three elements each of which is an array that contains four integers. To visualize this, consider a row of three lockers, in which 
each locker contains four sub-lockers that someone can store items in. To illustrate how to create an initialized multidimensional array, we will create a two-by-three multidimensional 
array called mat2 composed of random integer values.

int mat2[][3] = {{1, 6, 3}, {5, 9, 2}};

Just like in the single dimension case, the array is initialized by placing elements between {} brackets. In this case, the elements inside the outermost brackets are arrays of three 
elements each. It is important to note that while the two-by-three dimension can be inferred from the right-hand side of the expression, the only dimension that can be omitted is the 
first (notice the first [] is empty); all others must be supplied. The array mat2, represents this table:

2x3 matrix example

While it is possible to have a theoretically infinite number of dimensions, in practice, dimensions greater than two are very rare. For a two-dimensional matrix, the first dimension 
represents the number of rows and the second dimension represents the number of columns.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create a two-dimensional nine-by-nine uninitialized array of integers called arr.


Hint
Recall the three-by-four array that was created earlier:

int mat[3][4];

In this checkpoint, we require a nine-by-nine array.

Checkpoint 2 Passed
2.
Given the following table:

3x3 matrix example

Create an initialized two-dimensional array called matrix that represents it.


Hint
Creating a multidimensional array is done like so:

arr[first_dimension][second_dimension] = {{first_row_items}, {second_row_items}, {etc…}};

exercise6.c
-----------
#include<stdio.h>

int main() {

  // Checkpoint 1 code goes here.
  int arr[9][9];
  // Checkpoint 2 code goes here. 
  int matrix[][3] = {{2, 9, 11}, {3, 1, 4}, {8, 3, 1}};
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------











































































































































